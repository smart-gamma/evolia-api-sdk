<?php
/**
 * CandidateAddDpae
 *
 * PHP version 5
 *
 * @category Class
 * @package  Evolia
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Evolia
 *
 * Connection of Troops & Evolia
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Evolia\Model;

use \ArrayAccess;
use \Evolia\ObjectSerializer;

/**
 * CandidateAddDpae Class Doc Comment
 *
 * @category Class
 * @package  Evolia
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CandidateAddDpae implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CandidateAddDpae';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'refCandidate' => 'string',
'refMission' => 'string',
'agence' => 'string',
'dateHeurePrevueEmbauche' => '\DateTime',
'numDPAE' => 'string',
'dateEnvoi' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'refCandidate' => null,
'refMission' => null,
'agence' => null,
'dateHeurePrevueEmbauche' => 'date-time',
'numDPAE' => null,
'dateEnvoi' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'refCandidate' => 'RefCandidate',
'refMission' => 'RefMission',
'agence' => 'Agence',
'dateHeurePrevueEmbauche' => 'DateHeurePrevueEmbauche',
'numDPAE' => 'NumDPAE',
'dateEnvoi' => 'DateEnvoi'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'refCandidate' => 'setRefCandidate',
'refMission' => 'setRefMission',
'agence' => 'setAgence',
'dateHeurePrevueEmbauche' => 'setDateHeurePrevueEmbauche',
'numDPAE' => 'setNumDPAE',
'dateEnvoi' => 'setDateEnvoi'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'refCandidate' => 'getRefCandidate',
'refMission' => 'getRefMission',
'agence' => 'getAgence',
'dateHeurePrevueEmbauche' => 'getDateHeurePrevueEmbauche',
'numDPAE' => 'getNumDPAE',
'dateEnvoi' => 'getDateEnvoi'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['refCandidate'] = isset($data['refCandidate']) ? $data['refCandidate'] : null;
        $this->container['refMission'] = isset($data['refMission']) ? $data['refMission'] : null;
        $this->container['agence'] = isset($data['agence']) ? $data['agence'] : null;
        $this->container['dateHeurePrevueEmbauche'] = isset($data['dateHeurePrevueEmbauche']) ? $data['dateHeurePrevueEmbauche'] : null;
        $this->container['numDPAE'] = isset($data['numDPAE']) ? $data['numDPAE'] : null;
        $this->container['dateEnvoi'] = isset($data['dateEnvoi']) ? $data['dateEnvoi'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['refCandidate'] === null) {
            $invalidProperties[] = "'refCandidate' can't be null";
        }
        if ($this->container['agence'] === null) {
            $invalidProperties[] = "'agence' can't be null";
        }
        if ($this->container['dateHeurePrevueEmbauche'] === null) {
            $invalidProperties[] = "'dateHeurePrevueEmbauche' can't be null";
        }
        if ($this->container['numDPAE'] === null) {
            $invalidProperties[] = "'numDPAE' can't be null";
        }
        if ($this->container['dateEnvoi'] === null) {
            $invalidProperties[] = "'dateEnvoi' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets refCandidate
     *
     * @return string
     */
    public function getRefCandidate()
    {
        return $this->container['refCandidate'];
    }

    /**
     * Sets refCandidate
     *
     * @param string $refCandidate refCandidate
     *
     * @return $this
     */
    public function setRefCandidate($refCandidate)
    {
        $this->container['refCandidate'] = $refCandidate;

        return $this;
    }

    /**
     * Gets refMission
     *
     * @return string
     */
    public function getRefMission()
    {
        return $this->container['refMission'];
    }

    /**
     * Sets refMission
     *
     * @param string $refMission refMission
     *
     * @return $this
     */
    public function setRefMission($refMission)
    {
        $this->container['refMission'] = $refMission;

        return $this;
    }

    /**
     * Gets agence
     *
     * @return string
     */
    public function getAgence()
    {
        return $this->container['agence'];
    }

    /**
     * Sets agence
     *
     * @param string $agence agence
     *
     * @return $this
     */
    public function setAgence($agence)
    {
        $this->container['agence'] = $agence;

        return $this;
    }

    /**
     * Gets dateHeurePrevueEmbauche
     *
     * @return \DateTime
     */
    public function getDateHeurePrevueEmbauche()
    {
        return $this->container['dateHeurePrevueEmbauche'];
    }

    /**
     * Sets dateHeurePrevueEmbauche
     *
     * @param \DateTime $dateHeurePrevueEmbauche dateHeurePrevueEmbauche
     *
     * @return $this
     */
    public function setDateHeurePrevueEmbauche($dateHeurePrevueEmbauche)
    {
        $this->container['dateHeurePrevueEmbauche'] = $dateHeurePrevueEmbauche;

        return $this;
    }

    /**
     * Gets numDPAE
     *
     * @return string
     */
    public function getNumDPAE()
    {
        return $this->container['numDPAE'];
    }

    /**
     * Sets numDPAE
     *
     * @param string $numDPAE numDPAE
     *
     * @return $this
     */
    public function setNumDPAE($numDPAE)
    {
        $this->container['numDPAE'] = $numDPAE;

        return $this;
    }

    /**
     * Gets dateEnvoi
     *
     * @return \DateTime
     */
    public function getDateEnvoi()
    {
        return $this->container['dateEnvoi'];
    }

    /**
     * Sets dateEnvoi
     *
     * @param \DateTime $dateEnvoi dateEnvoi
     *
     * @return $this
     */
    public function setDateEnvoi($dateEnvoi)
    {
        $this->container['dateEnvoi'] = $dateEnvoi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
